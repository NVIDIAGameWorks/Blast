# - Try to find PxShared binary SDK
# - Sets PXSHAREDSDK_LIBS_DEBUG and PXSHAREDSDK_LIBS_RELEASE - lists of the libraries found
# - Sets PXSHAREDSDK_INCLUDE_DIRS 
# - Sets PXSHAREDSDK_DLLS - List of the DLLs to copy to the bin directory of projects that depend on this

include(FindPackageHandleStandardArgs)

# Find the includes

# Always try explicit PATH variable first
find_path(PXSHAREDSDK_PATH include/foundation/Px.h
	PATHS
	$ENV{PM_PxShared_PATH}
	$ENV{PM_PhysX_PATH}/pxshared # multipack
	${GW_DEPS_ROOT}/$ENV{PM_PxShared_NAME}/${PxSharedSDK_FIND_VERSION}
	${GW_DEPS_ROOT}/PxShared/${PxSharedSDK_FIND_VERSION}
)

# Is the config defined in the names of binaries or path
option(PHYSX_DEPS_WITH_CONFIG_NAME "Assume that Physx dependencies contain config in their names" OFF)

if(PHYSX_DEPS_WITH_CONFIG_NAME)
	SET(DEBUG_CONFIG_SUFFIX "DEBUG")
	SET(PROFILE_CONFIG_SUFFIX "PROFILE")
	SET(CHECKED_CONFIG_SUFFIX "CHECKED")
	SET(RELEASE_CONFIG_SUFFIX "")
else()
	SET(DEBUG_CONFIG_PATH_SUFFIX "debug")
	SET(PROFILE_CONFIG_PATH_SUFFIX "profile")
	SET(CHECKED_CONFIG_PATH_SUFFIX "checked")
	SET(RELEASE_CONFIG_PATH_SUFFIX "release")
endif()

if (TARGET_BUILD_PLATFORM STREQUAL "Windows")
	# If the project pulling in this dependency needs the static crt, then append that to the path.
	if (STATIC_WINCRT)
		SET(PXSHARED_CRT_SUFFIX "-staticcrt")
	else()
		SET(PXSHARED_CRT_SUFFIX "")
	endif()

	if (CMAKE_CL_64)
		SET(PXSHARED_ARCH_FOLDER "win64")
		SET(PXSHARED_ARCH_FILE "_64")
	else()
		SET(PXSHARED_ARCH_FOLDER "win32")
		SET(PXSHARED_ARCH_FILE "_x86")
	endif()

	# What compiler version do we want?

	if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 18.0.0.0 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.0.0.0)
		SET(VS_STR "VS2013")
	elseif (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 19.0.0.0 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.10.0.0)
		SET(VS_STR "VS2015")
	elseif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 19.10.0.0)
		SET(VS_STR "VS2017")
	else()
		MESSAGE(FATAL_ERROR "Failed to find compatible PxSharedSDK - Only supporting VS2013 and VS2015")
	endif()
	
	SET(LIB_PATH ${PXSHAREDSDK_PATH}/lib/${VS_STR}${PXSHARED_ARCH_FOLDER}-cmake${PXSHARED_CRT_SUFFIX} ${PXSHAREDSDK_PATH}/lib/${VS_STR}${PXSHARED_ARCH_FOLDER} ${PXSHAREDSDK_PATH}/../lib/${PXSHARED_ARCH_FOLDER}/${VS_STR} ${PXSHAREDSDK_PATH}/../lib)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")

elseif(TARGET_BUILD_PLATFORM STREQUAL "PS4")
	SET(LIB_PATH ${PXSHAREDSDK_PATH}/lib/vc14ps4-cmake ${PXSHAREDSDK_PATH}/../lib)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
	SET(CMAKE_FIND_LIBRARY_PREFIXES "lib")
elseif(TARGET_BUILD_PLATFORM STREQUAL "XboxOne")
	SET(LIB_PATH ${PXSHAREDSDK_PATH}/lib/vc14xboxone-cmake ${PXSHAREDSDK_PATH}/../Lib)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ".lib")
	SET(CMAKE_FIND_LIBRARY_PREFIXES "lib" "")
elseif(TARGET_BUILD_PLATFORM STREQUAL "linux")
	SET(LIB_PATH ${PXSHAREDSDK_PATH}/lib/linux64-cmake ${PXSHAREDSDK_PATH}/../Lib)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
	SET(CMAKE_FIND_LIBRARY_PREFIXES "lib")
	SET(PXSHARED_ARCH_FILE "_x64")
endif()


# Now find all of the PxShared libs in the lib directory

find_library(PHYSXFOUNDATION_LIB
	NAMES PhysXFoundation${RELEASE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${RELEASE_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXPVDSDK_STATIC_LIB
	NAMES PhysXPvdSDK_static${RELEASE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${RELEASE_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXTASK_STATIC_LIB
	NAMES PhysXTask_static${RELEASE_CONFIG_SUFFIX} PhysXTask_static${RELEASE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${RELEASE_CONFIG_PATH_SUFFIX}
)

find_library(PHYSXFOUNDATION_LIB_DEBUG
	NAMES PhysXFoundation${DEBUG_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${DEBUG_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXPVDSDK_STATIC_LIB_DEBUG
	NAMES PhysXPvdSDK_static${DEBUG_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${DEBUG_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXTASK_STATIC_LIB_DEBUG
	NAMES PhysXTask_static${DEBUG_CONFIG_SUFFIX} PhysXTask_static${DEBUG_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${DEBUG_CONFIG_PATH_SUFFIX}
)

find_library(PHYSXFOUNDATION_LIB_CHECKED
	NAMES PhysXFoundation${CHECKED_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${CHECKED_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXPVDSDK_STATIC_LIB_CHECKED
	NAMES PhysXPvdSDK_static${CHECKED_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${CHECKED_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXTASK_STATIC_LIB_CHECKED
	NAMES PhysXTask_static${CHECKED_CONFIG_SUFFIX} PhysXTask_static${CHECKED_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${CHECKED_CONFIG_PATH_SUFFIX}
)

find_library(PHYSXFOUNDATION_LIB_PROFILE
	NAMES PhysXFoundation${PROFILE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${PROFILE_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXPVDSDK_STATIC_LIB_PROFILE
	NAMES PhysXPvdSDK_static${PROFILE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${PROFILE_CONFIG_PATH_SUFFIX}
)
find_library(PHYSXTASK_STATIC_LIB_PROFILE
	NAMES PhysXTask_static${PROFILE_CONFIG_SUFFIX} PhysXTask_static${PROFILE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
	PATHS ${LIB_PATH}
	PATH_SUFFIXES ${PROFILE_CONFIG_PATH_SUFFIX}
)

if (TARGET_BUILD_PLATFORM STREQUAL "Windows")
	SET(DLL_PATH ${PXSHAREDSDK_PATH}/bin/${VS_STR}${PXSHARED_ARCH_FOLDER}-cmake${PXSHARED_CRT_SUFFIX} ${PXSHAREDSDK_PATH}/bin/${VS_STR}${PXSHARED_ARCH_FOLDER} ${PXSHAREDSDK_PATH}/../bin/${PXSHARED_ARCH_FOLDER}/${VS_STR} ${PXSHAREDSDK_PATH}/../bin)

	find_library(PHYSXFOUNDATION_DLL
		NAMES PhysXFoundation${RELEASE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
		PATHS ${DLL_PATH}
		PATH_SUFFIXES ${RELEASE_CONFIG_PATH_SUFFIX}
	)

	find_library(PHYSXFOUNDATION_DLL_DEBUG
		NAMES PhysXFoundation${DEBUG_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
		PATHS ${DLL_PATH}
		PATH_SUFFIXES ${DEBUG_CONFIG_PATH_SUFFIX}
	)

	find_library(PHYSXFOUNDATION_DLL_CHECKED
		NAMES PhysXFoundation${CHECKED_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
		PATHS ${DLL_PATH}
		PATH_SUFFIXES ${CHECKED_CONFIG_PATH_SUFFIX}
	)

	find_library(PHYSXFOUNDATION_DLL_PROFILE
		NAMES PhysXFoundation${PROFILE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
		PATHS ${DLL_PATH}
		PATH_SUFFIXES ${PROFILE_CONFIG_PATH_SUFFIX}
	)
	
	#Put the found dll variables in a list if we actually looked for them (windows)
	SET(DLL_VAR_LIST 
		PHYSXFOUNDATION_DLL 
		PHYSXFOUNDATION_DLL_DEBUG 
		PHYSXFOUNDATION_DLL_CHECKED 
		PHYSXFOUNDATION_DLL_PROFILE 
	)
endif()

if (TARGET_BUILD_PLATFORM STREQUAL "linux")
	SET(BIN_PATH ${PXSHAREDSDK_PATH}/bin/linux64-cmake ${PXSHAREDSDK_PATH}/../Bin)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".so")

    find_library(PHYSXFOUNDATION_LIB
        NAMES PhysXFoundation${RELEASE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )
    find_library(PHYSXPVDSDK_STATIC_LIB
        NAMES PhysXPvdSDK_static${RELEASE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )

    find_library(PHYSXFOUNDATION_LIB_CHECKED
        NAMES PhysXFoundation${CHECKED_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )
    find_library(PHYSXPVDSDK_STATIC_LIB_CHECKED
        NAMES PhysXPvdSDK_static${CHECKED_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )
    
    find_library(PHYSXFOUNDATION_LIB_DEBUG
        NAMES PhysXFoundation${DEBUG_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )
    find_library(PHYSXPVDSDK_STATIC_LIB_DEBUG
        NAMES PhysXPvdSDK_static${DEBUG_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )
    
    find_library(PHYSXFOUNDATION_LIB_PROFILE
        NAMES PhysXFoundation${PROFILE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )
    find_library(PHYSXPVDSDK_STATIC_LIB_PROFILE
        NAMES PhysXPvdSDK_static${PROFILE_CONFIG_SUFFIX}${PXSHARED_ARCH_FILE}
        PATHS ${BIN_PATH}
    )
endif()

FIND_PACKAGE_HANDLE_STANDARD_ARGS(PXSHAREDSDK
	DEFAULT_MSG
	PXSHAREDSDK_PATH

	PHYSXFOUNDATION_LIB
	PHYSXPVDSDK_STATIC_LIB
	PHYSXTASK_STATIC_LIB
	
	PHYSXFOUNDATION_LIB_DEBUG
	PHYSXPVDSDK_STATIC_LIB_DEBUG
	PHYSXTASK_STATIC_LIB_DEBUG

	PHYSXFOUNDATION_LIB_CHECKED
	PHYSXPVDSDK_STATIC_LIB_CHECKED
	PHYSXTASK_STATIC_LIB_CHECKED

	PHYSXFOUNDATION_LIB_PROFILE
	PHYSXPVDSDK_STATIC_LIB_PROFILE
	PHYSXTASK_STATIC_LIB_PROFILE

	${DLL_VAR_LIST}
)

if (PXSHAREDSDK_FOUND)
	# NOTE: This include list is way too long and reaches into too many internals.
	# Also may not be good enough for all users.
	SET(PXSHAREDSDK_INCLUDE_DIRS 
		${PXSHAREDSDK_PATH}/include
		${PXSHAREDSDK_PATH}/include/foundation
	)

	SET(PXSHAREDSDK_LIBS_RELEASE ${PHYSXFOUNDATION_LIB} ${PHYSXPVDSDK_STATIC_LIB} ${PHYSXTASK_STATIC_LIB}
		CACHE STRING ""
	)
	SET(PXSHAREDSDK_LIBS_DEBUG ${PHYSXFOUNDATION_LIB_DEBUG} ${PHYSXPVDSDK_STATIC_LIB_DEBUG} ${PHYSXTASK_STATIC_LIB_DEBUG}
		CACHE STRING ""
	)
	
	SET(PXSHAREDSDK_LIBS_CHECKED ${PHYSXFOUNDATION_LIB_CHECKED} ${PHYSXPVDSDK_STATIC_LIB_CHECKED} ${PHYSXTASK_STATIC_LIB_CHECKED}
		CACHE STRING ""
	)

	SET(PXSHAREDSDK_LIBS_PROFILE ${PHYSXFOUNDATION_LIB_PROFILE} ${PHYSXPVDSDK_STATIC_LIB_PROFILE} ${PHYSXTASK_STATIC_LIB_PROFILE}
		CACHE STRING ""
	)

	SET(PXSHAREDSDK_DLLS 
		${PHYSXFOUNDATION_DLL} 
		${PHYSXFOUNDATION_DLL_DEBUG} 
		${PHYSXFOUNDATION_DLL_CHECKED} 
		${PHYSXFOUNDATION_DLL_PROFILE} 
	)
	
	SET(PXSHAREDSDK_LIBRARIES "" CACHE STRING "")
	
	foreach(x ${PXSHAREDSDK_LIBS_RELEASE})
		list(APPEND PXSHAREDSDK_LIBRARIES optimized ${x})
	endforeach()
	
	foreach(x ${PXSHAREDSDK_LIBS_DEBUG})
		list(APPEND PXSHAREDSDK_LIBRARIES debug ${x})
	endforeach()
endif()
